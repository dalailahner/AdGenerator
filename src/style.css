@layer reset, toggle, main, reducedmotion;

@import url("noicss.reset") layer(reset);
@import url("noicss.toggle") layer(toggle);
@import url("noicss.reducedmotion") layer(reducedmotion);

@layer main {
  :root {
    scrollbar-gutter: stable both-edges;
    --accentColor: #0358a9;
    --textColor: #191919;
    --bgColor: #fff;
    --hoverColor: #f0f8ff;
    --borderRadius: 3px;
    --infinity: calc(infinity * 1px);
    --formGap: 2rem;
    --inputWidth: max(50%, 300px);

    --noicssToggleWidth: 2.5rem;
    --noicssToggleHeight: 1.5rem;
    --noicssToggleRed: var(--bgColor);
    --noicssToggleGreen: var(--bgColor);
    --noicssToggleBorder: var(--accentColor);
    --noicssToggleButton: var(--accentColor);
    --noicssToggleButtonBorder: var(--hoverColor);
    --noicssToggleOutline: var(--accentColor);
  }

  * {
    outline-width: medium;
    outline-offset: 4px;
  }

  body {
    color: var(--textColor);
    font-family: Lato, Avenir, "Adobe Heiti Std", "Helvetica Neue", Helvetica, "Segoe UI", "Trebuchet MS", Arial, sans-serif;
    background-color: var(--bgColor);
  }

  .mbm {
    margin-bottom: var(--formGap);
  }

  .btn {
    padding: 0.5em 1em;
    gap: 0.2em;
    color: var(--textColor);
    font-weight: 700;
    cursor: pointer;
  }

  main {
    padding: 0 1rem;
    display: grid;
    grid-template-columns: 100%;
    grid-template-rows: 8rem auto auto 5rem;
    grid-template-areas:
      "headline"
      "input"
      "output"
      ".";
    gap: 5rem;
    place-items: start center;

    @media screen and (width > 768px) {
      grid-template-columns: 3fr 2fr;
      grid-template-rows: 8rem auto 5rem;
      grid-template-areas:
        "headline ."
        "input output"
        ". .";
      gap: 0;
    }
  }

  .pageHeadline {
    grid-area: headline;
    place-self: center;
    font-size: 2.5rem;
    text-align: center;
  }

  section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: start;
  }

  .inputSection {
    grid-area: input;
  }

  form,
  .advancedCont {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    font-size: 1.2rem;
  }

  .trenner {
    margin: var(--formGap) 0;
    width: 100%;
    height: 1px;
    background-color: var(--accentColor);
  }

  .fileUploadLabel {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    color: var(--hoverColor);
    border: 2px solid var(--accentColor);
    border-radius: var(--borderRadius);
    background-color: var(--accentColor);
    transition: all 0.15s ease-out;

    &:is(:hover, :has(+ input[type="file"]:focus-visible)) {
      color: var(--accentColor);
      background-color: var(--hoverColor);
    }

    &:has(+ input[type="file"]:focus-visible) {
      outline: medium solid var(--accentColor);
    }
  }
  input[type="file"] {
    height: 0;
    position: absolute;
    opacity: 0;

    &:focus-visible {
      outline: none;
    }
  }

  .textInputWithLabelCont {
    width: var(--inputWidth);
    display: flex;
    flex-direction: column;
    align-items: start;
  }

  label:has(+ :is(input[type="text"], textarea)) {
    padding: 0 0.5em;
    position: relative;
    color: var(--hoverColor);
    border-radius: var(--borderRadius) var(--borderRadius) 0 0;
    background-color: var(--accentColor);
    transition: all 0.15s ease-out;

    &:is(:hover, :focus-visible) {
      color: var(--bgColor);
    }
  }

  :is(input[type="text"], textarea) {
    width: 100%;
    padding: 0.33em 0.5em;
    color: var(--textColor);
    border: 2px solid var(--accentColor);
    border-radius: 0 var(--borderRadius) var(--borderRadius) var(--borderRadius);
    background-color: var(--hoverColor);
    overflow-wrap: anywhere;
    isolation: isolate;
    transition: all 0.15s ease-out;

    &:is(:hover, :focus-visible) {
      background-color: var(--bgColor);
    }
    &:focus-visible {
      outline-color: var(--accentColor);
    }
  }

  .toggleCont {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 0.5em;
    place-items: center start;

    & p:first-of-type {
      justify-self: end;
    }
  }

  .advancedBtn {
    padding: 0 0.33em;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    font-weight: 400;
    border-bottom: 2px solid transparent;
    background: none;
    transition: all 0.15s ease-out;

    &:is(:hover, :focus-visible) {
      border-bottom: 2px solid var(--accentColor);
    }

    & svg {
      rotate: x 0;
      transition: 0.25s ease-out;
    }

    &:has(+ .open) svg {
      rotate: x 180deg;
    }
  }

  .advancedCont {
    height: 0;
    overflow: hidden;
    transition: all 0.25s ease-out;

    &.open {
      height: fit-content;
      @supports (height: calc-size(auto, size)) {
        height: calc-size(auto, size);
      }
    }
  }

  .inputHeadline {
    margin-bottom: var(--formGap);
    padding-left: 5vw;
    width: 100%;
    font-size: 1.2em;
    font-weight: 700;
  }

  #font-picker {
    box-shadow: none !important;

    & .dropdown-button {
      padding: 0.5em 1em !important;
      height: auto !important;
      gap: 0.2em;
      color: var(--hoverColor) !important;
      font-weight: 700;
      border: 2px solid var(--accentColor) !important;
      border-radius: var(--borderRadius);
      background-color: var(--accentColor) !important;
      transition: all 0.15s ease-out;
      &:focus-visible {
        outline: medium solid var(--accentColor) !important;
      }

      &:is(:hover, :focus-visible) {
        color: var(--accentColor) !important;
        background-color: var(--hoverColor) !important;
      }

      & .dropdown-font-family {
        white-space: nowrap;
      }

      & .dropdown-icon::before {
        border-top-color: currentColor !important;
      }
    }

    & .font-list {
      background-color: var(--hoverColor) !important;
      box-shadow: inset 0 0 0 2px var(--accentColor) !important;
      scrollbar-width: thin;
    }

    & .font-list .font-list-item .font-button {
      border-left: 2px solid var(--accentColor) !important;

      &.active-font {
        background-color: #cde !important;
      }
      &:is(:hover, :focus-visible) {
        color: var(--bgColor) !important;
        background-color: var(--accentColor) !important;
      }
    }
  }

  .colorPickerGroup {
    min-height: 5lh;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-template-areas:
      "colorPickerImg accentColor"
      "colorPickerImg textColor"
      "colorPickerImg bgColor";
    gap: 0 var(--formGap);
  }

  .refImgUploadCont {
    grid-area: colorPickerImg;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .colorPickerRefImg {
    grid-area: colorPickerImg;
    max-width: 100%;
    max-height: 500px;
  }

  .colorInputWithLabelCont {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5em;

    /* use "grid-area: attr("name");" when browser support is sufficient for those declarations: */
    &:has([name="accentColor"]) {
      grid-area: accentColor;
    }
    &:has([name="textColor"]) {
      grid-area: textColor;
    }
    &:has([name="bgColor"]) {
      grid-area: bgColor;
    }
  }

  input[type="color"] {
    width: 1lh;
    height: 1lh;
    cursor: pointer;
    transition: all 0.15s ease-out;

    &:focus-visible {
      outline-color: var(--accentColor);
    }

    &::-webkit-color-swatch-wrapper {
      padding: 0;
      border: 2px solid var(--textColor);
    }

    &::-webkit-color-swatch {
      border: none;
    }
  }

  /**********************************/
  /* OUTPUT (RIGHT SIDE ON DESKTOP) */

  .outputSection {
    grid-area: output;
    container-name: output;
    container-type: inline-size;
  }

  .preview {
    width: 390px;
    height: 844px;
    border: 12px solid oklch(from var(--textColor) calc(l + 0.15) c h);
    border-radius: 8px;
    background-color: #fff;
  }
}
