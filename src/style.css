@layer reset, toggle, main, reducedmotion;

@import url("noicss.reset") layer(reset);
@import url("noicss.toggle") layer(toggle);
@import url("noicss.reducedmotion") layer(reducedmotion);

@layer main {
  @keyframes rotate {
    from {
      rotate: 0deg;
    }
    to {
      rotate: 360deg;
    }
  }
  :root {
    --accentColor: #0358a9;
    --textColor: #191919;
    --bgColor: #fff;
    --hoverColor: #f0f8ff;
    --errorColor: #f53223;
    --borderThickness: 2px;
    --borderRadius: 3px;
    --infinity: calc(infinity * 1px);
    --formGap: 2rem;
    --inputBlockPaddingMult: 0.33;
    --inputFontMult: 1.2;
    --inputWidth: max(50%, 300px);
    --inputHeight: calc(calc(1rlh * var(--inputFontMult)) + calc(calc(1rem * var(--inputFontMult)) * calc(var(--inputBlockPaddingMult) * 2)) + calc(var(--borderThickness) * 2)); /* text + padding + border */
    --highlightedTextColor: var(--bgColor);
    --noicssToggleWidth: 2.5rem;
    --noicssToggleHeight: 1.5rem;
    --noicssToggleRed: var(--bgColor);
    --noicssToggleGreen: var(--bgColor);
    --noicssToggleBorder: var(--accentColor);
    --noicssToggleButton: var(--accentColor);
    --noicssToggleButtonBorder: var(--hoverColor);
    --noicssToggleOutline: var(--accentColor);

    scrollbar-gutter: auto;

    @media screen and (width > 1400px) {
      scrollbar-gutter: stable both-edges;
    }
  }

  * {
    outline-width: medium;
    outline-offset: 4px;
  }

  body {
    color: var(--textColor);
    font-family: Lato, Avenir, "Adobe Heiti Std", "Helvetica Neue", Helvetica, "Segoe UI", "Trebuchet MS", Arial, sans-serif;
    background-color: var(--bgColor);
  }

  .mbm {
    margin-bottom: var(--formGap);
  }

  .btn {
    padding: 0.5em 1em;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 0.2em;
    color: var(--hoverColor);
    font-weight: 700;
    border: 2px solid var(--accentColor);
    border-radius: var(--borderRadius);
    background-color: var(--accentColor);
    cursor: pointer;
    transition: all 0.15s ease-out;

    &:is(:hover, :focus-visible) {
      color: var(--accentColor);
      background-color: var(--hoverColor);
    }

    &:focus-visible {
      outline: medium solid var(--accentColor);
    }

    &[disabled] {
      opacity: 0.5;
      cursor: not-allowed;

      &:is(:hover, :focus-visible) {
        color: var(--hoverColor);
        background-color: var(--accentColor);
      }
    }
  }

  label:has(~ :where(input[type="file"], input[type="radio"])) {
    height: var(--inputHeight);
  }
  label:has(~ :where(input[type="file"], input[type="radio"]):is(:focus, :focus-visible)) {
    outline: medium solid var(--accentColor);
  }
  :where(input[type="file"], input[type="radio"]) {
    height: 0;
    position: absolute;
    opacity: 0;

    &:focus-visible {
      outline: none;
    }
  }

  .sizeNotifier {
    width: 100vw;
    height: 100dvh;
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    inset: 0;
    color: var(--textColor);
    background-color: var(--bgColor);

    @media screen and (width > 999px) {
      display: none;
    }
  }

  main {
    padding: 0 1rem;
    display: grid;
    grid-template: "headline" 8rem "input" auto "output" auto "." 5rem / 100%;
    place-items: start center;
    gap: var(--formGap) 0;

    @media screen and (width < 1000px) {
      display: none;
    }

    @media screen and (width > 1400px) {
      grid-template: "headline ." 8rem "input output" auto ". ." 5rem / auto 972px;
      gap: 0 var(--formGap);
    }
  }

  .pageHeadline {
    grid-area: headline;
    place-self: center;
    font-size: 2.5rem;
    text-align: center;
  }

  section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: start;
  }

  .inputSection {
    grid-area: input;
    font-size: calc(1rem * var(--inputFontMult));
  }

  form,
  .advancedCont {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .trenner {
    margin: var(--formGap) 0;
    width: 100%;
    min-height: 1px;
    background: linear-gradient(to right, transparent 0%, var(--accentColor) 20%, var(--accentColor) 80%, transparent 100%);

    &:first-of-type {
      margin-top: 0;
    }

    .advancedCont & {
      opacity: 0;
      transition: all 0.15s 0.15s linear;
    }
    .advancedCont.open & {
      opacity: 1;
    }
  }

  .textInputWithLabelCont {
    width: var(--inputWidth);
    display: flex;
    flex-direction: column;
    align-items: start;
    position: relative;
  }

  label:has(+ :is(input[type="text"], textarea)) {
    padding: 0 0.5em;
    position: relative;
    color: var(--hoverColor);
    border-radius: var(--borderRadius) var(--borderRadius) 0 0;
    background-color: var(--accentColor);
    transition: all 0.15s ease-out;

    &:is(:hover, :focus-visible) {
      color: var(--bgColor);
    }
  }

  :is(input[type="text"], textarea) {
    padding: calc(1em * var(--inputBlockPaddingMult)) 0.5em;
    width: 100%;
    min-height: var(--inputHeight);
    max-height: fit-content;
    color: var(--textColor);
    overflow-wrap: anywhere;
    border: var(--borderThickness) solid var(--accentColor);
    border-radius: 0 var(--borderRadius) var(--borderRadius) var(--borderRadius);
    background-color: var(--hoverColor);
    resize: vertical;
    transition: background-color 0.15s ease-out;
    isolation: isolate;

    &:is(:hover, :focus-visible) {
      background-color: var(--bgColor);
    }
    &:focus-visible {
      outline-color: var(--accentColor);
    }
  }

  .inputInfo {
    padding: 0 1em;
    height: var(--inputHeight);
    display: flex;
    align-items: center;
    position: absolute;
    right: 0;
    bottom: 0;
    color: var(--hoverColor);
    font-size: 0.875rem;
    font-weight: 400;
    line-height: 1.15;
    letter-spacing: 0.1px;
    border: none;
    border-radius: 0 var(--borderRadius) var(--borderRadius) 0;
    background-color: var(--accentColor);
    clip-path: polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%);
    visibility: hidden;
    z-index: 10;
    translate: calc(100% - var(--borderThickness)) 0;
    transition: all 0.15s ease-out;

    :is(input[type="text"], textarea):focus ~ & {
      clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
      visibility: visible;
    }
  }

  .errorMsg {
    padding: 1cap;
    width: 100%;
    position: absolute;
    bottom: 0;
    font-size: 0.875rem;
    font-weight: 700;
    line-height: 1.15;
    letter-spacing: 0.1px;
    border-top: 2px solid var(--errorColor);
    border-radius: 0 0 var(--borderRadius) var(--borderRadius);
    background-color: var(--errorColor);
    visibility: hidden;
    opacity: 0;
    z-index: 11;
    translate: 0 calc(100% - var(--borderThickness));
    transition: all 0.25s linear;

    &.show {
      visibility: visible;
      opacity: 1;
    }
  }

  .fileUploadCont {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .toggleCont {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    place-items: center start;
    gap: 0.5em;

    & p:first-of-type {
      justify-self: end;
    }
  }

  .advancedBtn {
    margin-bottom: 1em;
    padding: 0 0.33em;
    color: var(--textColor);
    font-weight: 400;
    border: none;
    border-bottom: 2px solid transparent;
    border-radius: 0;
    background: transparent;
    transition: all 0.15s ease-out;

    &:is(:hover, :focus-visible) {
      border-bottom: 2px solid var(--accentColor);
      background: transparent;
    }

    & svg {
      rotate: x 0deg;
      transition: 0.25s ease-out;
    }

    &:has(+ .open) svg {
      rotate: x 180deg;
    }
  }

  .advancedCont {
    height: 0;
    overflow: hidden;
    transition: all 0.25s ease-out;

    &.open {
      height: fit-content;
      @supports (height: calc-size(auto, size)) {
        height: calc-size(auto, size);
      }
    }
  }

  .inputHeadline {
    margin-bottom: var(--formGap);
    padding-left: 5vw;
    width: 100%;
    font-size: 1.2em;
    font-weight: 700;
  }

  .radioCont {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: var(--formGap);

    & label:has(~ input[type="radio"]:checked) {
      color: var(--accentColor);
      background-color: var(--hoverColor);
    }
  }

  #font-picker {
    box-shadow: none !important;

    & .dropdown-button {
      padding: calc(calc(1rem * var(--inputFontMult)) * var(--inputBlockPaddingMult)) 1em !important;
      min-height: var(--inputHeight);
      gap: 0.2em;
      color: var(--hoverColor) !important;
      font-weight: 700;
      border: var(--borderThickness) solid var(--accentColor) !important;
      border-radius: var(--borderRadius);
      background-color: var(--accentColor) !important;
      transition: all 0.15s ease-out;

      &:is(:hover, :focus-visible) {
        color: var(--accentColor) !important;
        background-color: var(--hoverColor) !important;
      }
      &:focus-visible {
        outline: medium solid var(--accentColor) !important;
      }

      & .dropdown-font-family {
        white-space: nowrap;
      }

      & .dropdown-icon::before {
        border-top-color: currentcolor !important;
      }
    }

    & .font-list {
      background-color: var(--hoverColor) !important;
      box-shadow: inset 0 0 0 var(--borderThickness) var(--accentColor) !important;
      scrollbar-width: thin;
    }

    & .font-list .font-list-item .font-button {
      border-left: var(--borderThickness) solid var(--accentColor) !important;

      &.active-font {
        background-color: #cde !important;
      }
      &:is(:hover, :focus-visible) {
        color: var(--bgColor) !important;
        background-color: var(--accentColor) !important;
      }
    }
  }

  .clearLogoInput {
    padding: 0;
    width: var(--inputHeight);
    height: var(--inputHeight);
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    right: 0;
    color: var(--errorColor);
    font-size: 2rem;
    border: 2px solid var(--errorColor);
    border-radius: var(--infinite);
    background-color: var(--bgColor);
    visibility: hidden;
    opacity: 0;
    translate: calc(100% + 0.5em) 0;
    transition: all 0.15s linear;

    &.show {
      visibility: visible;
      opacity: 1;
    }

    &:is(:hover, :focus-visible) {
      color: var(--bgColor);
      background-color: var(--errorColor);
    }
  }

  .colorPickerGroup {
    min-height: 5lh;
    display: grid;
    grid-template: "colorPickerImg accentColor" 1fr "colorPickerImg textColor" 1fr "colorPickerImg bgColor" 1fr / 1fr 1fr;
    gap: 0 var(--formGap);
  }

  .refImgUploadCont {
    grid-area: colorPickerImg;
    visibility: hidden;
    opacity: 0;

    &.show {
      visibility: visible;
      opacity: 1;
    }
  }
  .colorPickerRefImgCont {
    grid-area: colorPickerImg;
    position: relative;
    visibility: hidden;
    opacity: 0;

    &.show {
      visibility: visible;
      opacity: 1;
    }

    & .colorPickerRefImg {
      max-width: 100%;
      max-height: 500px;
    }

    & .clearRefImgInput {
      padding: 0;
      width: var(--inputHeight);
      height: var(--inputHeight);
      display: flex;
      align-items: center;
      justify-content: center;
      position: absolute;
      top: 0;
      right: 0;
      color: var(--errorColor);
      font-size: 2rem;
      border: 2px solid var(--errorColor);
      border-radius: var(--infinite);
      background-color: var(--bgColor);
      translate: 50% -50%;
      transition: all 0.15s linear;

      &:is(:hover, :focus-visible) {
        color: var(--bgColor);
        background-color: var(--errorColor);
      }
    }
  }

  .colorInputWithLabelCont {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5em;

    /* use "grid-area: attr("name");" when browser support is sufficient for those declarations: */
    &:has([name="accentColor"]) {
      grid-area: accentColor;
    }
    &:has([name="textColor"]) {
      grid-area: textColor;
    }
    &:has([name="bgColor"]) {
      grid-area: bgColor;
    }
  }

  input[type="color"] {
    width: 1lh;
    height: 1lh;
    cursor: pointer;
    transition: all 0.15s ease-out;

    &:focus-visible {
      outline-color: var(--accentColor);
    }

    &::-webkit-color-swatch-wrapper {
      padding: 0;
      border: var(--borderThickness) solid var(--textColor);
    }

    &::-webkit-color-swatch {
      border: none;
    }
  }

  /*********************************  */
  /* OUTPUT (RIGHT SIDE ON DESKTOP) */

  .outputSection {
    grid-area: output;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto;
    place-items: center;
    gap: var(--formGap) 0;
    position: sticky;
    top: var(--formGap);

    & .iframeCont {
      width: max-content;
      height: max-content;
      position: relative;

      &:has(#billboard) {
        grid-column: 1 / -1;
        grid-row: 1 / span 1;
      }

      & .preview {
        box-sizing: content-box;
        display: none;
        background-color: #fff;

        &[srcdoc] {
          display: unset;
        }

        &#billboard {
          width: 970px;
          height: 250px;
        }

        &#mediumRectangle {
          width: 300px;
          height: 250px;
        }

        &#halfPageAd {
          width: 300px;
          height: 600px;
        }
      }

      & .loader {
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        inset: 0;
        background-color: #cde;
        visibility: hidden;
        opacity: 0.9;

        & svg {
          width: 48px;
          height: 48px;
          fill: var(--accentColor);
          animation: rotate 0.9s linear infinite;
        }
      }
    }

    &.loading .loader {
      visibility: visible;
    }
  }
}
